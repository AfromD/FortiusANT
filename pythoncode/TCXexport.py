#-------------------------------------------------------------------------------
# Version info
#-------------------------------------------------------------------------------
__version__ = "2020-11-05"
# 2020-11-05    First version
#-------------------------------------------------------------------------------
import time
from datetime import datetime
#-------------------------------------------------------------------------------
# TCX template
#-------------------------------------------------------------------------------
TcxHeader =     '<?xml version="1.0" encoding="utf-8"?>\n' \
                '<TrainingCenterDatabase \n' \
                '    xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\n' \
                '        http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\n' \
                '        http://www.garmin.com/xmlschemas/ActivityExtension/v2\n' \
                '        http://www8.garmin.com/xmlschemas/ActivityExtensionv2.xsd"\n' \
                '        xmlns:ns5="http://www.garmin.com/xmlschemas/ActivityGoals/v1"\n' \
                '        xmlns:ns3="http://www.garmin.com/xmlschemas/ActivityExtension/v2"\n' \
                '        xmlns:ns2="http://www.garmin.com/xmlschemas/UserProfile/v2"\n' \
                '        xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"\n' \
                '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n' \
                '>\n'

                #---------------------------------------------------------------
                # parameter 1  = id                 = string    Name of the activity
                #           2  = StartTime          = string    2020-11-02T18:31:34.796Z
                #           3  = TotalTimeSeconds   = integer   3321
                #           4  = DistanceMeters     = integer   28972
                #           5  = Calories           = integer   574
                #           6  = Intensity          = string    Active
                #           7  = Cadence            = integer   78
                #           8  = TriggerMethod      = string    Manual
                #           9  = AverageHeartRateBpm= integer   60
                #          10  = MaximumHeartRateBpm= integer   60
                #---------------------------------------------------------------
TcxActivities = '<Activities>\n' \
                '   <Activity Sport="Biking">\n' \
                '       <Id>%s</Id>\n' \
                '       <Notes>Generated by FortiusANT</Notes>\n' \
                '       <Lap StartTime="%s">\n' \
                '           <TotalTimeSeconds>%s</TotalTimeSeconds>\n' \
                '           <DistanceMeters>%s</DistanceMeters>\n' \
                '           <Calories>%s</Calories>\n' \
                '           <Intensity>%s</Intensity>\n' \
                '           <Cadence>%s</Cadence>\n' \
                '           <TriggerMethod>%s</TriggerMethod>\n' \
                '           <AverageHeartRateBpm xsi:type="HeartRateInBeatsPerMinute_t"><Value>%s</Value></AverageHeartRateBpm>\n' \
                '           <MaximumHeartRateBpm xsi:type="HeartRateInBeatsPerMinute_t"><Value>%s</Value></MaximumHeartRateBpm>\n' \
                '           <Track>\n'

                #---------------------------------------------------------------
                # parameter 1  = Time               = string    2020-11-02T18:31:34.796Z
                #---------------------------------------------------------------
TcxTrackpoint = '               <Trackpoint>\n' \
                '                   <Time>%s</Time>\n'

                #---------------------------------------------------------------
                # parameter 1  = LatitudeDegrees    = float     51.909076690674
                # parameter 2  = LongitudeDegrees   = float     5.8606972694397
                #---------------------------------------------------------------
TcxPosition =   '                   <Position>\n' \
                '                       <LatitudeDegrees>%s</LatitudeDegrees>\n' \
                '                       <LongitudeDegrees>%s</LongitudeDegrees>\n' \
                '                   </Position>\n'

                #---------------------------------------------------------------
                # parameter 1  = AltitudeMeters     = float     6.123
                #---------------------------------------------------------------
TcxAltitude =   '                   <AltitudeMeters>%s</AltitudeMeters>\n'

                #---------------------------------------------------------------
                # parameter 1  = DistanceMeters     = float     010.987
                #---------------------------------------------------------------
TcxDistance =   '                   <DistanceMeters>%s</DistanceMeters>\n'

                #---------------------------------------------------------------
                # parameter 1  = HeartRateBpm       = integer   60
                #---------------------------------------------------------------
TcxHeartRate =  '                   <HeartRateBpm>\n' \
                '                       <Value>%s</Value>\n' \
                '                   </HeartRateBpm>\n'
                #---------------------------------------------------------------
                # parameter 1  = Cadence            = integer   70
                #---------------------------------------------------------------
TcxCadence =    '                   <Cadence>%s</Cadence>\n'

                #---------------------------------------------------------------
                # parameter 1  = Watts              = integer   71
                #---------------------------------------------------------------
TcxWatts =      '                   <Extensions>\n' \
                '                       <ns3:TPX>\n' \
                '                           <ns3:Watts>%s</ns3:Watts>\n' \
                '                       </ns3:TPX>\n' \
                '                   </Extensions>\n'
                #---------------------------------------------------------------
TcxTpEnd =      '               </Trackpoint>\n'
                #---------------------------------------------------------------
TcxFooter =	    '           </Track>\n' \
                '       </Lap>\n' \
                '   </Activity>\n' \
                '</Activities>\n' \
                '</TrainingCenterDatabase>\n'

class TcxExport():
    def __init__(self):
        self.Start()

    def TcxTime(self, dt):
        #-----------------------------------------------------------------------
        # Return a time string in TCX format
        #-----------------------------------------------------------------------
        return dt.strftime("%Y-%m-%dT%H:%M:%S") + "Z"

    def Start(self):
        #-----------------------------------------------------------------------
        # Initialize class variables
        #-----------------------------------------------------------------------
        self.tcx                = ''                    # Contents for TCX file
        self.StartTime          = datetime.utcnow()     # Start time of the track
        self.StartTimeSeconds   = time.time()
        self.TotalTimeSeconds   = 0
        self.TotalDistance      = 0
        self.TotalCalories      = 0
        self.SumCadence         = 0                     # To be averaged!
        self.SumHeartRate       = 0                     # To be averaged!
        self.HeartRateMax       = 0                     # Max of HeartRate
        self.NrTrackpoints      = 0                     # Count

    def Trackpoint(self, Position=None, Latitude=None, Longitude=None, Altitude=None, Distance=None, HeartRate=None, Cadence=None, Watts=None):
        #-----------------------------------------------------------------------
        # Trackpoint calculations
        #-----------------------------------------------------------------------
        self.NrTrackpoints += 1
        #-----------------------------------------------------------------------
        # Add trackpoint
        #-----------------------------------------------------------------------
        self.tcx += TcxTrackpoint % (self.TcxTime(datetime.utcnow()))
        if Latitude:    self.tcx += TcxPosition   % (float(Latitude), float(Longitude))
        if Altitude:    self.tcx += TcxAltitude   % (float(Altitude))
        if Watts:       self.tcx += TcxWatts      % (int(Watts))

        if Distance:
                        self.tcx += TcxDistance   % (float(Distance))
                        self.TotalDistance += Distance
        if HeartRate:
                        self.tcx += TcxHeartRate  % (int(HeartRate))
                        self.SumHeartRate += HeartRate
        if Cadence:     
                        self.tcx += TcxCadence    % (int(Cadence))
                        self.SumCadence += Cadence

        if HeartRate > self.HeartRateMax:
                        self.HeartRateMax = HeartRate
        self.tcx += TcxTpEnd

    def Stop(self):
        #-----------------------------------------------------------------------
        # Track calculations
        #-----------------------------------------------------------------------
        self.TotalTimeSeconds = time.time() - self.StartTimeSeconds
        if self.NrTrackpoints == 0: self.NrTrackpoints = 1 # Avoid divide by zero
        #-----------------------------------------------------------------------
        # Pre-pend the Activity totals
        #-----------------------------------------------------------------------
        self.tcx = TcxActivities % ('FortiusANT @ ' + self.TcxTime(self.StartTime), \
                                    self.TcxTime(self.StartTime), \
                                    int(self.TotalTimeSeconds), \
                                    int(self.TotalDistance), \
                                    int(self.TotalCalories), \
                                    'Active', \
                                    int(self.SumCadence / self.NrTrackpoints * 60), \
                                    'Manual', \
                                    int(self.SumHeartRate / self.NrTrackpoints * 60), \
                                    int(self.HeartRateMax) \
                                   ) + \
                    self.tcx
        #-----------------------------------------------------------------------
        # Pre-pend header and append footer
        #-----------------------------------------------------------------------
        self.tcx = TcxHeader + self.tcx + TcxFooter

        #-----------------------------------------------------------------------
        # Write tcx file
        #-----------------------------------------------------------------------
        filename = 'FortiusANT.' + self.StartTime.strftime('%Y-%m-%d %H-%M-%S') + ".tcx"
        tcxFile = open(filename,"w+")
        tcxFile.write(self.tcx)
        tcxFile.close

        #-----------------------------------------------------------------------
        # Cleanup
        #-----------------------------------------------------------------------
        self.Start()

if __name__ == "__main__":
    tcx = TcxExport()
    tcx.Start()                                             # Optional
    tcx.Trackpoint(HeartRate=78, Cadence=123, Watts=456)
    tcx.Trackpoint(HeartRate=78, Cadence=123, Watts=456)
    tcx.Stop()
